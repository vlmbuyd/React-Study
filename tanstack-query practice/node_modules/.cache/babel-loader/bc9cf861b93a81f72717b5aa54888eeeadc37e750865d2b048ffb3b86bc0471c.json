{"ast":null,"code":"var _jsxFileName = \"D:\\\\STUDY\\\\FE\\\\React-Study\\\\tanstack-query practice\\\\src\\\\HomePage.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { getPosts, uploadPost } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction HomePage() {\n  _s();\n  var _postsData$results;\n  const [content, setContent] = useState('');\n  const queryClient = useQueryClient();\n  const {\n    data: postsData,\n    isPending,\n    isError\n  } = useQuery({\n    queryKey: ['posts'],\n    queryFn: getPosts,\n    retry: 0\n  });\n  const uploadPostMutation = useMutation({\n    mutationFn: newPost => uploadPost(newPost),\n    onSuccess: () => {\n      queryClient.invalidateQueries('posts');\n    }\n  });\n  const handleInputChange = e => {\n    setContent(e.target.value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newPost = {\n      username: 'codeit',\n      content\n    };\n    uploadPostMutation.mutate(newPost);\n    setContent('');\n  };\n  if (isPending) return '로딩 중입니다...';\n  if (isError) return '에러가 발생했습니다.';\n  const posts = (_postsData$results = postsData === null || postsData === void 0 ? void 0 : postsData.results) !== null && _postsData$results !== void 0 ? _postsData$results : [];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"content\",\n          value: content,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: uploadPostMutation.isPending || !content,\n          type: \"submit\",\n          children: \"\\uC5C5\\uB85C\\uB4DC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [post.user.name, \": \", post.content]\n        }, post.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(HomePage, \"HoY52yHNh5yhwwhhKw8WSZRhbvA=\", false, function () {\n  return [useQueryClient, useQuery, useMutation];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["useState","useMutation","useQuery","useQueryClient","getPosts","uploadPost","jsxDEV","_jsxDEV","Fragment","_Fragment","HomePage","_s","_postsData$results","content","setContent","queryClient","data","postsData","isPending","isError","queryKey","queryFn","retry","uploadPostMutation","mutationFn","newPost","onSuccess","invalidateQueries","handleInputChange","e","target","value","handleSubmit","preventDefault","username","mutate","posts","results","children","onSubmit","name","onChange","fileName","_jsxFileName","lineNumber","columnNumber","disabled","type","map","post","user","id","_c","$RefreshReg$"],"sources":["D:/STUDY/FE/React-Study/tanstack-query practice/src/HomePage.js"],"sourcesContent":["import { useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { getPosts, uploadPost } from './api';\n\nfunction HomePage() {\n  const [content, setContent] = useState('');\n  \n  const queryClient = useQueryClient();\n\n  const {\n    data: postsData,\n    isPending,\n    isError,\n  } = useQuery({\n    queryKey: ['posts'],\n    queryFn: getPosts,\n    retry: 0,\n  });\n\n  const uploadPostMutation = useMutation({\n    mutationFn: (newPost) => uploadPost(newPost),\n    onSuccess: () => {\n      queryClient.invalidateQueries('posts');\n    }\n  });\n\n  const handleInputChange = (e) => {\n    setContent(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const newPost = { username: 'codeit', content };\n    uploadPostMutation.mutate(newPost);\n    setContent('');\n  };\n\n  if (isPending) return '로딩 중입니다...';\n\n  if (isError) return '에러가 발생했습니다.';\n\n  const posts = postsData?.results ?? [];\n\n  return (\n    <>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <textarea\n            name=\"content\"\n            value={content}\n            onChange={handleInputChange}\n          />\n          <button disabled={uploadPostMutation.isPending || !content} type=\"submit\">\n            업로드\n          </button>\n        </form>\n      </div>\n      <div>\n        <ul>\n          {posts.map((post) => (\n            <li key={post.id}>\n              {post.user.name}: {post.content}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nexport default HomePage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}